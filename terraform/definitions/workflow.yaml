# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

main:
    params: [event]
    steps:
        - init:
            assign:
            - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
            - location: ${sys.get_env("GOOGLE_CLOUD_LOCATION")}
            - encoding_id: '${"encoding-" + sys.get_env("GOOGLE_CLOUD_WORKFLOW_EXECUTION_ID")}'
            - gke_cluster_name: ${sys.get_env("GKE_NAME")}
            - bucket_name: '${"bkt-" + (encoding_id)}'
            - docker_repo_uri: ${sys.get_env("DOCKER_REPO_URI")}
            - image_version: "encoder:v0.1"
            - base64: ${base64.decode(event.data.message.data)}
            - message: ${json.decode(base64)}
            - event_id: ${message.eventId}
        - create_bucket:
            call: googleapis.storage.v1.buckets.insert
            args:
                project: ${project_id}
                body:
                    name: ${bucket_name}
        - label_bucket:
            call: googleapis.storage.v1.buckets.update
            args:
                bucket: ${bucket_name}
                body:
                    labels:
                        event: ${event_id}
        - run_pod_encoder_on_gke:
            call: gke.request
            args:
                project: ${project_id}
                location: ${location}
                cluster_id: ${gke_cluster_name}
                method: "POST"
                path: "/api/v1/namespaces/encoder-test/pods"
                body:
                    kind: Pod
                    metadata:
                      generateName: encoder-
                      name: ${encoding_id}
                      labels:
                        name: encoder
                        version: stable
                        event: ${event_id}
                      annotations:
                        gke-gcsfuse/volumes: "true"
                        gke-gcsfuse/ephemeral-storage-limit: "0"
                        gke-gcsfuse/cpu-limit: "0"
                        gke-gcsfuse/memory-limit: "0"
                        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
                    spec:
                      restartPolicy: Always
                      serviceAccountName: ksa-wi-encoder
                      terminationGracePeriodSeconds: 15
                      nodeSelector:
                        cloud.google.com/machine-family: n2d
                        cloud.google.com/compute-class: Performance
                      containers:
                      - image: '${(docker_repo_uri) + "/" + (image_version)}'
                        name: encoder
                        imagePullPolicy: Always
                        ports:
                        - name: udp
                          containerPort: 5000
                          protocol: UDP
                        env:
                        - name: ENV
                          value: dev
                        - name: SENDER_ADDR
                          value: '${(message.camOriginIp) + ":" + (message.camOriginPort)}'
                        resources:
                          requests:
                            cpu: 8
                            memory: 16Gi
                            ephemeral-storage: 100Gi
                          limits:
                            memory: 16Gi
                            ephemeral-storage: 100Gi
                        volumeMounts:
                        - name: gcs-fuse-csi-output
                          mountPath: "/output"
                      volumes:
                      - name: gcs-fuse-cache
                        emptyDir:
                          medium: Memory
                      - name: gcs-fuse-csi-output
                        csi:
                          driver: gcsfuse.csi.storage.gke.io
                          volumeAttributes:
                            bucketName: ${bucket_name}
                            mountOptions: "implicit-dirs"
                            disableMetrics: "false"
                            enableStreamingWrites: "true"
        - return_pubsub_message:
            return: ${message}
